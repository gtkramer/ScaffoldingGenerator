//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/george/Documents/Projects/C#/ScaffoldingGenerator/src/ConsoleApplication/IO/StlAscii.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class StlAsciiParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, NAME=9, 
		FLOAT=10, WHITESPACE=11;
	public const int
		RULE_solid = 0, RULE_facet = 1, RULE_normal = 2, RULE_loop = 3, RULE_vertex = 4;
	public static readonly string[] ruleNames = {
		"solid", "facet", "normal", "loop", "vertex"
	};

	private static readonly string[] _LiteralNames = {
		null, "'solid'", "'endsolid'", "'facet'", "'endfacet'", "'normal'", "'outer loop'", 
		"'endloop'", "'vertex'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "NAME", "FLOAT", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StlAscii.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static StlAsciiParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public StlAsciiParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public StlAsciiParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SolidContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(StlAsciiParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(StlAsciiParser.NAME, i);
		}
		public ITerminalNode Eof() { return GetToken(StlAsciiParser.Eof, 0); }
		public FacetContext[] facet() {
			return GetRuleContexts<FacetContext>();
		}
		public FacetContext facet(int i) {
			return GetRuleContext<FacetContext>(i);
		}
		public SolidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_solid; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStlAsciiVisitor<TResult> typedVisitor = visitor as IStlAsciiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSolid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SolidContext solid() {
		SolidContext _localctx = new SolidContext(Context, State);
		EnterRule(_localctx, 0, RULE_solid);
		int _la;
		try {
			State = 30;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10; Match(T__0);
				State = 11; Match(NAME);
				State = 13;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 12; facet();
					}
					}
					State = 15;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__2 );
				State = 17; Match(T__1);
				State = 18; Match(NAME);
				State = 19; Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 21; Match(T__0);
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 22; facet();
					}
					}
					State = 25;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__2 );
				State = 27; Match(T__1);
				State = 28; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FacetContext : ParserRuleContext {
		public NormalContext normal() {
			return GetRuleContext<NormalContext>(0);
		}
		public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public FacetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_facet; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStlAsciiVisitor<TResult> typedVisitor = visitor as IStlAsciiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFacet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FacetContext facet() {
		FacetContext _localctx = new FacetContext(Context, State);
		EnterRule(_localctx, 2, RULE_facet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; Match(T__2);
			State = 33; normal();
			State = 34; loop();
			State = 35; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalContext : ParserRuleContext {
		public ITerminalNode[] FLOAT() { return GetTokens(StlAsciiParser.FLOAT); }
		public ITerminalNode FLOAT(int i) {
			return GetToken(StlAsciiParser.FLOAT, i);
		}
		public NormalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStlAsciiVisitor<TResult> typedVisitor = visitor as IStlAsciiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalContext normal() {
		NormalContext _localctx = new NormalContext(Context, State);
		EnterRule(_localctx, 4, RULE_normal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; Match(T__4);
			State = 38; Match(FLOAT);
			State = 39; Match(FLOAT);
			State = 40; Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		public VertexContext[] vertex() {
			return GetRuleContexts<VertexContext>();
		}
		public VertexContext vertex(int i) {
			return GetRuleContext<VertexContext>(i);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStlAsciiVisitor<TResult> typedVisitor = visitor as IStlAsciiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 6, RULE_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(T__5);
			State = 43; vertex();
			State = 44; vertex();
			State = 45; vertex();
			State = 46; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VertexContext : ParserRuleContext {
		public ITerminalNode[] FLOAT() { return GetTokens(StlAsciiParser.FLOAT); }
		public ITerminalNode FLOAT(int i) {
			return GetToken(StlAsciiParser.FLOAT, i);
		}
		public VertexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertex; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStlAsciiVisitor<TResult> typedVisitor = visitor as IStlAsciiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VertexContext vertex() {
		VertexContext _localctx = new VertexContext(Context, State);
		EnterRule(_localctx, 8, RULE_vertex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; Match(T__7);
			State = 49; Match(FLOAT);
			State = 50; Match(FLOAT);
			State = 51; Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\r', '\x38', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', 
		'\x10', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x11', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x6', '\x2', '\x1A', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x1B', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '!', '\n', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x2', '\x2', '\a', '\x2', '\x4', '\x6', '\b', 
		'\n', '\x2', '\x2', '\x2', '\x35', '\x2', ' ', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\"', '\x3', '\x2', '\x2', '\x2', '\x6', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\b', ',', '\x3', '\x2', '\x2', '\x2', '\n', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\r', '\a', '\x3', '\x2', '\x2', '\r', '\xF', '\a', 
		'\v', '\x2', '\x2', '\xE', '\x10', '\x5', '\x4', '\x3', '\x2', '\xF', 
		'\xE', '\x3', '\x2', '\x2', '\x2', '\x10', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x11', '\xF', '\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x13', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x14', '\a', '\x4', '\x2', '\x2', '\x14', '\x15', '\a', '\v', '\x2', 
		'\x2', '\x15', '\x16', '\a', '\x2', '\x2', '\x3', '\x16', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x17', '\x19', '\a', '\x3', '\x2', '\x2', '\x18', 
		'\x1A', '\x5', '\x4', '\x3', '\x2', '\x19', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', '\x4', '\x2', 
		'\x2', '\x1E', '\x1F', '\a', '\x2', '\x2', '\x3', '\x1F', '!', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\f', '\x3', '\x2', '\x2', '\x2', ' ', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '!', '\x3', '\x3', '\x2', '\x2', '\x2', '\"', 
		'#', '\a', '\x5', '\x2', '\x2', '#', '$', '\x5', '\x6', '\x4', '\x2', 
		'$', '%', '\x5', '\b', '\x5', '\x2', '%', '&', '\a', '\x6', '\x2', '\x2', 
		'&', '\x5', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '\a', '\x2', 
		'\x2', '(', ')', '\a', '\f', '\x2', '\x2', ')', '*', '\a', '\f', '\x2', 
		'\x2', '*', '+', '\a', '\f', '\x2', '\x2', '+', '\a', '\x3', '\x2', '\x2', 
		'\x2', ',', '-', '\a', '\b', '\x2', '\x2', '-', '.', '\x5', '\n', '\x6', 
		'\x2', '.', '/', '\x5', '\n', '\x6', '\x2', '/', '\x30', '\x5', '\n', 
		'\x6', '\x2', '\x30', '\x31', '\a', '\t', '\x2', '\x2', '\x31', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\a', '\n', '\x2', '\x2', 
		'\x33', '\x34', '\a', '\f', '\x2', '\x2', '\x34', '\x35', '\a', '\f', 
		'\x2', '\x2', '\x35', '\x36', '\a', '\f', '\x2', '\x2', '\x36', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x5', '\x11', '\x1B', ' ',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
