//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from StlAscii.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class StlAsciiLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, NAME=9, 
		FLOAT=10, WHITESPACE=11;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "NAME", 
		"FLOAT", "WHITESPACE"
	};


	public StlAsciiLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public StlAsciiLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'solid'", "'endsolid'", "'facet'", "'endfacet'", "'normal'", "'outer loop'", 
		"'endloop'", "'vertex'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "NAME", "FLOAT", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StlAscii.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static StlAsciiLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,11,130,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,8,4,8,88,8,8,11,8,12,8,89,1,9,3,9,93,8,9,1,9,5,9,96,8,9,10,9,
		12,9,99,9,9,1,9,3,9,102,8,9,1,9,4,9,105,8,9,11,9,12,9,106,1,9,1,9,3,9,
		111,8,9,1,9,4,9,114,8,9,11,9,12,9,115,3,9,118,8,9,1,10,3,10,121,8,10,1,
		10,1,10,4,10,125,8,10,11,10,12,10,126,1,10,1,10,0,0,11,1,1,3,2,5,3,7,4,
		9,5,11,6,13,7,15,8,17,9,19,10,21,11,1,0,4,5,0,45,45,48,57,65,90,95,95,
		97,122,2,0,43,43,45,45,1,0,48,57,3,0,9,9,12,12,32,32,140,0,1,1,0,0,0,0,
		3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
		0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,1,23,1,0,0,0,3,29,
		1,0,0,0,5,38,1,0,0,0,7,44,1,0,0,0,9,53,1,0,0,0,11,60,1,0,0,0,13,71,1,0,
		0,0,15,79,1,0,0,0,17,87,1,0,0,0,19,92,1,0,0,0,21,124,1,0,0,0,23,24,5,115,
		0,0,24,25,5,111,0,0,25,26,5,108,0,0,26,27,5,105,0,0,27,28,5,100,0,0,28,
		2,1,0,0,0,29,30,5,101,0,0,30,31,5,110,0,0,31,32,5,100,0,0,32,33,5,115,
		0,0,33,34,5,111,0,0,34,35,5,108,0,0,35,36,5,105,0,0,36,37,5,100,0,0,37,
		4,1,0,0,0,38,39,5,102,0,0,39,40,5,97,0,0,40,41,5,99,0,0,41,42,5,101,0,
		0,42,43,5,116,0,0,43,6,1,0,0,0,44,45,5,101,0,0,45,46,5,110,0,0,46,47,5,
		100,0,0,47,48,5,102,0,0,48,49,5,97,0,0,49,50,5,99,0,0,50,51,5,101,0,0,
		51,52,5,116,0,0,52,8,1,0,0,0,53,54,5,110,0,0,54,55,5,111,0,0,55,56,5,114,
		0,0,56,57,5,109,0,0,57,58,5,97,0,0,58,59,5,108,0,0,59,10,1,0,0,0,60,61,
		5,111,0,0,61,62,5,117,0,0,62,63,5,116,0,0,63,64,5,101,0,0,64,65,5,114,
		0,0,65,66,5,32,0,0,66,67,5,108,0,0,67,68,5,111,0,0,68,69,5,111,0,0,69,
		70,5,112,0,0,70,12,1,0,0,0,71,72,5,101,0,0,72,73,5,110,0,0,73,74,5,100,
		0,0,74,75,5,108,0,0,75,76,5,111,0,0,76,77,5,111,0,0,77,78,5,112,0,0,78,
		14,1,0,0,0,79,80,5,118,0,0,80,81,5,101,0,0,81,82,5,114,0,0,82,83,5,116,
		0,0,83,84,5,101,0,0,84,85,5,120,0,0,85,16,1,0,0,0,86,88,7,0,0,0,87,86,
		1,0,0,0,88,89,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,18,1,0,0,0,91,93,
		7,1,0,0,92,91,1,0,0,0,92,93,1,0,0,0,93,97,1,0,0,0,94,96,7,2,0,0,95,94,
		1,0,0,0,96,99,1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,101,1,0,0,0,99,97,
		1,0,0,0,100,102,5,46,0,0,101,100,1,0,0,0,101,102,1,0,0,0,102,104,1,0,0,
		0,103,105,7,2,0,0,104,103,1,0,0,0,105,106,1,0,0,0,106,104,1,0,0,0,106,
		107,1,0,0,0,107,117,1,0,0,0,108,110,5,101,0,0,109,111,7,1,0,0,110,109,
		1,0,0,0,110,111,1,0,0,0,111,113,1,0,0,0,112,114,7,2,0,0,113,112,1,0,0,
		0,114,115,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,118,1,0,0,0,117,
		108,1,0,0,0,117,118,1,0,0,0,118,20,1,0,0,0,119,121,5,13,0,0,120,119,1,
		0,0,0,120,121,1,0,0,0,121,122,1,0,0,0,122,125,5,10,0,0,123,125,7,3,0,0,
		124,120,1,0,0,0,124,123,1,0,0,0,125,126,1,0,0,0,126,124,1,0,0,0,126,127,
		1,0,0,0,127,128,1,0,0,0,128,129,6,10,0,0,129,22,1,0,0,0,12,0,89,92,97,
		101,106,110,115,117,120,124,126,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
