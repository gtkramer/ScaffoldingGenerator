//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from StlAscii.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class StlAsciiParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, NAME=9, 
		FLOAT=10, WHITESPACE=11;
	public const int
		RULE_solid = 0, RULE_facet = 1, RULE_normal = 2, RULE_loop = 3, RULE_vertex = 4;
	public static readonly string[] ruleNames = {
		"solid", "facet", "normal", "loop", "vertex"
	};

	private static readonly string[] _LiteralNames = {
		null, "'solid'", "'endsolid'", "'facet'", "'endfacet'", "'normal'", "'outer loop'", 
		"'endloop'", "'vertex'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "NAME", "FLOAT", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StlAscii.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static StlAsciiParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public StlAsciiParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public StlAsciiParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SolidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(StlAsciiParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(StlAsciiParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(StlAsciiParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FacetContext[] facet() {
			return GetRuleContexts<FacetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FacetContext facet(int i) {
			return GetRuleContext<FacetContext>(i);
		}
		public SolidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_solid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStlAsciiVisitor<TResult> typedVisitor = visitor as IStlAsciiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSolid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SolidContext solid() {
		SolidContext _localctx = new SolidContext(Context, State);
		EnterRule(_localctx, 0, RULE_solid);
		int _la;
		try {
			State = 30;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10;
				Match(T__0);
				State = 11;
				Match(NAME);
				State = 13;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 12;
					facet();
					}
					}
					State = 15;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__2 );
				State = 17;
				Match(T__1);
				State = 18;
				Match(NAME);
				State = 19;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 21;
				Match(T__0);
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 22;
					facet();
					}
					}
					State = 25;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__2 );
				State = 27;
				Match(T__1);
				State = 28;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FacetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NormalContext normal() {
			return GetRuleContext<NormalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public FacetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_facet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStlAsciiVisitor<TResult> typedVisitor = visitor as IStlAsciiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFacet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FacetContext facet() {
		FacetContext _localctx = new FacetContext(Context, State);
		EnterRule(_localctx, 2, RULE_facet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			Match(T__2);
			State = 33;
			normal();
			State = 34;
			loop();
			State = 35;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(StlAsciiParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(StlAsciiParser.FLOAT, i);
		}
		public NormalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStlAsciiVisitor<TResult> typedVisitor = visitor as IStlAsciiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalContext normal() {
		NormalContext _localctx = new NormalContext(Context, State);
		EnterRule(_localctx, 4, RULE_normal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			Match(T__4);
			State = 38;
			Match(FLOAT);
			State = 39;
			Match(FLOAT);
			State = 40;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VertexContext[] vertex() {
			return GetRuleContexts<VertexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VertexContext vertex(int i) {
			return GetRuleContext<VertexContext>(i);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStlAsciiVisitor<TResult> typedVisitor = visitor as IStlAsciiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 6, RULE_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			Match(T__5);
			State = 43;
			vertex();
			State = 44;
			vertex();
			State = 45;
			vertex();
			State = 46;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VertexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(StlAsciiParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(StlAsciiParser.FLOAT, i);
		}
		public VertexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStlAsciiVisitor<TResult> typedVisitor = visitor as IStlAsciiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VertexContext vertex() {
		VertexContext _localctx = new VertexContext(Context, State);
		EnterRule(_localctx, 8, RULE_vertex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			Match(T__7);
			State = 49;
			Match(FLOAT);
			State = 50;
			Match(FLOAT);
			State = 51;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,11,54,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,1,0,1,0,1,0,4,0,14,8,
		0,11,0,12,0,15,1,0,1,0,1,0,1,0,1,0,1,0,4,0,24,8,0,11,0,12,0,25,1,0,1,0,
		1,0,3,0,31,8,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,
		1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,0,0,5,0,2,4,6,8,0,0,51,0,30,1,0,0,0,2,
		32,1,0,0,0,4,37,1,0,0,0,6,42,1,0,0,0,8,48,1,0,0,0,10,11,5,1,0,0,11,13,
		5,9,0,0,12,14,3,2,1,0,13,12,1,0,0,0,14,15,1,0,0,0,15,13,1,0,0,0,15,16,
		1,0,0,0,16,17,1,0,0,0,17,18,5,2,0,0,18,19,5,9,0,0,19,20,5,0,0,1,20,31,
		1,0,0,0,21,23,5,1,0,0,22,24,3,2,1,0,23,22,1,0,0,0,24,25,1,0,0,0,25,23,
		1,0,0,0,25,26,1,0,0,0,26,27,1,0,0,0,27,28,5,2,0,0,28,29,5,0,0,1,29,31,
		1,0,0,0,30,10,1,0,0,0,30,21,1,0,0,0,31,1,1,0,0,0,32,33,5,3,0,0,33,34,3,
		4,2,0,34,35,3,6,3,0,35,36,5,4,0,0,36,3,1,0,0,0,37,38,5,5,0,0,38,39,5,10,
		0,0,39,40,5,10,0,0,40,41,5,10,0,0,41,5,1,0,0,0,42,43,5,6,0,0,43,44,3,8,
		4,0,44,45,3,8,4,0,45,46,3,8,4,0,46,47,5,7,0,0,47,7,1,0,0,0,48,49,5,8,0,
		0,49,50,5,10,0,0,50,51,5,10,0,0,51,52,5,10,0,0,52,9,1,0,0,0,3,15,25,30
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
